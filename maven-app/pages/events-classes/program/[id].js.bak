/* eslint-disable */
import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import mockData from '../../../utils/mockData'

import Head from 'next/head'
import Navbar from '../../../components/navbar'
import Footer from '../../../components/footer'
import Heading from '../../../components/heading'
import MailingList from '../../../components/mailingList'
import Subheading from '../../../components/subheading'

import ProfileContainer from '../../../components/blocks/profileContainer'
import CardContainer from '../../../components/blocks/cardContainer'
import EventContainer from '../../../components/blocks/eventContainer'
import Product from 'lib/models/product'
import Notfound from '../../../components/notFound'
import { getSession } from 'next-auth/client'
import { getSimilarPrograms } from '../../../lib/handlers/helper-handlers'

import {
  ContentState,
  convertToRaw,
  EditorState,
  convertFromRaw,
  convertFromHTML
} from 'draft-js'
import draftToHtml from 'draftjs-to-html'

// check user authentication before accessing this page
export async function getServerSideProps(context) {
  // session
  const session = await getSession({ req: context.req })
  return {
    // set session and token
    props: { session },
  }
}

//function ClassEvent({ params, classes }) {
const ClassEvent = (props) => {
  // variable to contain products from backend
  const [productState, setProductsState] = useState([])
  const [productDescription, setProductDescription] = useState(
    EditorState.createEmpty()
  )
  // variable to toggle loading gif
  const [isLoading, setIsLoading] = useState(true)
  // variable to toggle error message
  const [hasError, setHasError] = useState(false)
  // variable to contain host from backend
  const [hostState, setHostsState] = useState([])
  const [slug, setSlug] = useState(null)
  const [empty, setEmpty] = useState(false)
  const [similarPrograms,setSimilarPrograms] = useState([])
  const [similarProgramsparam,setSimilarProgramsparam] = useState({})

  useEffect(async () => {
    let similarPrograms = []
    if(Object.keys(similarProgramsparam).length > 0){
      similarPrograms = await getSimilarPrograms(similarProgramsparam)
    }
    setSimilarPrograms(similarPrograms.data)    
  }, [similarProgramsparam])

  const router = useRouter()

  //const eventData = classes[id]
  let product = new Product()

  useEffect(async () => {
    setIsLoading(true)
    if (router.isReady) {
      const { id } = router.query
      setSlug(id)
      const userId = props.session ? props.session.user.id : ''
      await product
        .getProduct(id, userId)
        .then((response) => {

          //Fetch Similar Programs start
          let productTagRefs = []
          if(response.data.tagMeta.length > 0){
            response.data.tagMeta.map((tag,index) => {
                productTagRefs.push(tag.value)
            })
          }
          else{
            productTagRefs = []
          }
          const similarProdsParams = {
            tags: productTagRefs,
            progRef: response.data.refId
          }
          setSimilarProgramsparam(similarProdsParams)
          //Fetch Similar Programs End - calls its own useEffect

          const organization =
            props.session && props.session.user.role === 'partner'
              ? true
              : false
          response.data['organization'] = organization

          //Product Description convertor start
          if (response.data.description) {
            let state
            try {
              state = convertFromRaw(JSON.parse(response.data.description))
            } catch {
              const blocksFromHTML = convertFromHTML(
                `<p>${response.data.description}<p>`
              )
              state = ContentState.createFromBlockArray(
                blocksFromHTML.contentBlocks,
                blocksFromHTML.entityMap
              )
            }

            let descHTML = ''
            try {
              const rawContentState = convertToRaw(state)
              descHTML = draftToHtml(rawContentState)
            } catch (err) {
              console.log(err, 'err from draft')
            }
            response.data.descHTML = descHTML
          }
          //Product Description convertor end

          setProductsState(response.data)
          setHostsState(response.data.hostMeta)
          if (!response.data.name) {
            setEmpty(true)
          }
          setIsLoading(false)
        })
        .catch((error) => {
          console.log(error,"errorCaught")
          setHasError(true)
          setIsLoading(true)
        })
    }
  }, [router])

  return (
    <div className="min-h-fullpage">
      <Head>
        <title>MAVEN</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <header className="w-full">
        <Navbar />
      </header>
      <main>
        <Heading
          breadcrumbs={[
            {
              link: '/',
              label: 'Home',
            },
            {
              link: '/events-classes',
              label: 'Events & Classes',
            },
            {
              link: '/' + slug,
              //label: eventData.event_name
              label: productState.name,
            },
          ]}
        />
        {empty ? (
          <Notfound />
        ) : (
          <>
            {isLoading || hasError ? (
              <div className="border border-blue-300 shadow rounded-md p-4 max-w-sm w-full mx-auto mb-16">
                <div className="animate-pulse flex space-x-4">
                  <div className="rounded-full bg-blue-400 h-12 w-12"></div>
                  <div className="flex-1 space-y-4 py-1">
                    <div className="h-4 bg-blue-400 rounded w-3/4"></div>
                    <div className="space-y-2">
                      <div className="h-4 bg-blue-400 rounded"></div>
                      <div className="h-4 bg-blue-400 rounded w-5/6"></div>
                    </div>
                    {hasError ? <div>Something Went Wrong!!!</div> : ' '}
                  </div>
                </div>
              </div>
            ) : (
              <>
                <EventContainer
                  eventData={productState}
                  purchased={false}
                  session={props.session}
                />

                {hostState.length > 0 && (
                  <ProfileContainer schema={hostState} />
                )}

                <Subheading content="Explore Similar Classes and Events" />

                <CardContainer schema={similarPrograms} />
              </>
            )}
          </>
        )}
      </main>
      <MailingList />
      <Footer />
    </div>
  )
}

export default ClassEvent
