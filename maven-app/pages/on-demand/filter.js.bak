import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import Heading from '../../components/heading'
import Footer from '../../components/footer'
import MailingList from '../../components/mailingList'
import Navbar from '../../components/navbar'
import CardContainer from '../../components/blocks/cardContainer'
import Pagination from '../../components/pagination'
import classMockData from '../../constants/classMockData'
import Product from 'lib/models/product'
import Loading from '../../components/loading'
import AccordionFilterElement from '../../components/accordion/accordionFilterElement'

const Filter = () => {
  const [activePage, setActivePage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [itemsShown, setItemsShown] = useState([])
  const [itemsPerPage, setItemsPerPage] = useState(6)
  const [classState, setClassState] = useState([])
  const [eventState, setEventState] = useState([])
  const [onDemandState, setOnDemandState] = useState([])
  // variable to toggle loading gif
  const [isLoading, setIsLoading] = useState(true)
  // variable to toggle error message
  const [hasError, setHasError] = useState(false)
  const [notFoundData, setNotFoundData] = useState(false)

  const router = useRouter()
  let product = new Product()

  useEffect(async () => {
    setIsLoading(true)
    if (router.isReady) {
      //add fauna funcation here

      await product
        .getAllProductsbyFilter(router.query)
        .then((response) => {
          console.log(response, 'response')
          if (
            response.data.events.length === 0 &&
            response.data.classes.length === 0 &&
            response.data.onDemands.length === 0
          ) {
            setNotFoundData(true)
            setIsLoading(false)
          } else {
            if (response.data.classes.length > 0) {
              setClassState(response.data.classes)
            }
            if (response.data.events.length > 0) {
              setEventState(response.data.events)
            }
            if (response.data.onDemands.length > 0) {
              setOnDemandState(response.data.onDemands)
            }
            setIsLoading(false)
          }
        })
        .catch((error) => {
          console.log(error)
          setHasError(true)
          setIsLoading(false)
        })
    }
  }, [router])
  console.log(classState, 'classState')
  useEffect(() => {
    setClassState(classState)
  }, [classState])

  useEffect(() => {
    setEventState(eventState)
  }, [eventState])

  useEffect(() => {
    setOnDemandState(onDemandState)
  }, [onDemandState])

  const updatePage = (newPage) => {
    setActivePage(newPage)
    //post request??

    const newItemsShown = classState.slice(
      itemsPerPage * (newPage - 1),
      itemsPerPage * newPage
    )
    setItemsShown(newItemsShown)
  }

  return (
    <div className="min-h-fullpage">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <header className="w-full">
        <Navbar />
      </header>
      <main>
        <Heading
          heading="Filter Classes & Events"
          breadcrumbs={[
            {
              link: '/',
              label: 'Home',
            },
            {
              link: '/events-classes',
              label: 'Events & Classes',
            },
          ]}
        />
        <div class="space-x-4 text-center">
          <div class="inline-block">
            <a href="#class">Classes</a>
          </div>
          <div class="inline-block">
            <a href="#event">Events</a>
          </div>
          <div class="inline-block">
            <a href="#on-demand">On Demand</a>
          </div>
        </div>
        {notFoundData && (
          <p className="text-center">
            No program found based on selected criteria
          </p>
        )}
        {isLoading || hasError ? (
          <Loading hasError={hasError} />
        ) : (
          <>
            <div className="px-5" id="class">
              <h2 className="grid lg:grid-cols-3 text-center">
                Classes ({classState.length})
              </h2>
              {classState.length > 0 && (
                <AccordionFilterElement
                  title=""
                  content={<CardContainer schema={classState} />}
                  key="class"
                />
              )}
            </div>
            <div className="px-5" id="event">
              <h2 className="grid lg:grid-cols-3 text-center">
                Events ({eventState.length})
              </h2>
              {eventState.length > 0 && (
                <AccordionFilterElement
                  title=""
                  content={<CardContainer schema={eventState} />}
                  key="event"
                />
              )}
            </div>
            <div className="px-5" id="on-demand">
              <h2 className="grid lg:grid-cols-3 text-center">
                On Demand ({onDemandState.length})
              </h2>
              {onDemandState.length > 0 && (
                <AccordionFilterElement
                  title=""
                  content={<CardContainer schema={onDemandState} />}
                  key="on-demand"
                />
              )}
            </div>
          </>
        )}
      </main>
      <MailingList />
      <Footer />
    </div>
  )
}

export default Filter
