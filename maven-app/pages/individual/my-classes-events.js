/* eslint-disable */
import Head from 'next/head'
import Footer from '../../components/footer'
import MailingList from '../../components/mailingList'
import Navbar from '../../components/navbar'
import Heading from '../../components/heading'
import Tabs from '../../components/tabs'
import CardContainer from '@components/blocks/cardContainer'
import Page from 'lib/models/pages'
import Loader from '@components/loader'
import { useState, useEffect } from 'react'
import { getSession } from 'next-auth/client'
import { Meta } from '../../components'
import meta from '../../constants/meta'

// check user authentication before accessing this page
export async function getServerSideProps(context) {
  // session
  const session = await getSession({ req: context.req })

  if (!session) {
    return {
      redirect: {
        // eslint-disable-next-line no-undef
        destination: `${server}/login`,
        permanent: false,
      },
    }
  }

  // if role is not student redirect to organization dashboard
  if (session.user.role !== 'student') {
    return {
      redirect: {
        // eslint-disable-next-line no-undef
        destination: `${server}/organization/dashboard`,
        permanent: false,
      },
    }
  }

  return {
    // set session and token
    props: { session },
  }
}

export default function MyClassesEvents() {
  const [activeTab, setActiveTab] = useState(0)
  const [upcomingPrograms, setUpcomingPrograms] = useState([])
  const [onDemands, setOnDemands] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [errors, setErrors] = useState({})

  const updateTab = (newTab) => {
    setActiveTab(newTab)
  }

  // get user after page load
  useEffect(async () => {
    // get current user
    getPrograms()
  }, [])

  const getPrograms = async () => {
    setIsLoading(true)

    try {
      await Page.getStudentEventsClassesPrograms('', '', 'upcoming').then(
        (result) => {
          let { upcomingPrograms, onDemandPrograms } = result.data

          setUpcomingPrograms(upcomingPrograms)
          setOnDemands(onDemandPrograms)
          setIsLoading(false)
        }
      )
    } catch (error) {
      setErrors(error)
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-fullpage">
      <Meta
        title={meta.individualMyclass.title}
        keywords={meta.individualMyclass.keywords}
        description={meta.individualMyclass.description}
      />
      {/* <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head> */}
      <header className="w-full">
        <Navbar />
      </header>
      <main>
        <div className="lg:pb-10 sm:pb-6 pb-2 sm:pt-0 pt-4">
          <Heading heading="My Classes and Events" />
        </div>
        <Tabs tabs={['Upcoming', 'On Demand']} updateTabProp={updateTab} />
        {isLoading && (
          <div className="justify-center mx-auto max-w-wrapper mt-5 mb-5">
            <Loader />
          </div>
        )}
        {activeTab === 0 && (
          <>
            {!isLoading && upcomingPrograms.length <= 0 && (
              <div className="justify-center mx-auto max-w-wrapper mt-5 mb-5">
                <p className="text-center text-blue-850">No Record(s) Found.</p>
              </div>
            )}
            {!isLoading && upcomingPrograms.length > 0 && (
              <div className="mx-auto max-w-wrapper pb-12 sm:pb-20">
                <CardContainer schema={upcomingPrograms} />
              </div>
            )}
          </>
        )}
        {activeTab === 1 && (
          <>
            {!isLoading && onDemands.length <= 0 && (
              <div className="justify-center mx-auto max-w-wrapper mt-5 mb-5">
                <p className="text-center text-blue-850">No Record(s) Found.</p>
              </div>
            )}
            {!isLoading && onDemands.length > 0 && (
              <div className="mx-auto max-w-wrapper pb-8 sm:pb-24">
                <CardContainer schema={onDemands} />
              </div>
            )}
          </>
        )}
      </main>
      <MailingList />
      <Footer />
    </div>
  )
}
